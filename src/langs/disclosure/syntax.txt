script{ s0 globalEntity*s0 s0 }

globalEntity{ varDef | funcDef }

funcDef{ type s0 ident s0 "(" s0 formalArgs s0 ")" s0 funcBody }
varDef{ type s0 ident s0 varInit? s0 ";" }
varInit{ "=" s0 expr }

type{ typeName s0 "*"*s0 }

typeName{
  "void" |
  "int"
}

formalArgs{ formalArg*formalArgSep }
formalArg{ type s0 ident }
formalArgSep{ s0 "," s0 }

funcBody{ codeBlock }
codeBlock{ "{" s0 statement*s0 s0 "}" }

statement{
  codeBlock |
  varDef |
  control |
  return |
  asm |
  exprStat
}

control{
  if |
  while
}

if{ "if" s0 "(" s0 expr s0 ")" s0 statement s0 else? }
else{ "else" s0 statement }
while{ "while" s0 "(" s0 expr s0 ")" s0 statement }

return{
  "return" s0 expr? s0 ";"
}

asm{ "asm" s0 "{" s0 inst*s0 s0 "}" }
inst{ [^;}]* ";" }

exprStat{ expr s0 ";" }
expr{ expr1_ }

expr1_{ expr1 | expr2_ }
expr2_{ expr2 | expr3_ }
expr3_{ expr3 | expr4_ }
expr4_{ expr4 | expr5_ }
expr5_{ expr5 | expr6_ }
expr6_{ expr6 | expr7_ }
expr7_{ expr7 | expr8_ }
expr8_{ expr8 | expr9_ }
expr9_{ expr9 | expr10_ }
expr10_{ expr10 | expr11_ }
expr11_{ expr11 | expr12_ }
expr12_{ expr12 | expr13_ }
expr13_{ expr13 | expr14_ }
expr14_{ expr14 | expr15_ }
expr15_{ expr15 | expr16_ }
expr16_{ expr16 | expr17_ }
expr17_{ expr17 | expr18_ }
expr18_{ expr18 | expr19_ }
expr19_{ expr19 | expr20_ }
expr20_{ expr20 | expr21_ }
expr21_{ expr21 }

expr1{ "..." }
expr2{ "..." }
expr3{ assign }
expr4{ "..." }
expr5{ "..." }
expr6{ "..." }
expr7{ "..." }
expr8{ bOr }
expr9{ "..." }
expr10{ "..." }
expr11{ "..." }
expr12{ "..." }
expr13{ "..." }
expr14{ add | sub }
expr15{ mul | div | mod }
expr16{ "..." }
expr17{ unaryPlus | unaryMinus | takeAddr | deref }
expr18{ "..." }
expr19{ "..." }
expr20{ call }
expr21{ literal | ident | grouping }

assign{ expr4_ s0 "=" s0 expr3_ }
bOr{ expr8_ s0 "|" s0 expr9_ }
add{ expr14_ s0 "+" s0 expr15_ }
sub{ expr14_ s0 "-" s0 expr15_ }
mul{ expr15_ s0 "*" s0 expr16_ }
div{ expr15_ s0 "/" s0 expr16_ }
mod{ expr15_ s0 "%" s0 expr16_ }
unaryPlus{ "+" s0 expr17_ }
unaryMinus{ "-" s0 expr17_ }
takeAddr{ "&" s0 expr17_ }
deref{ "*" s0 expr17_ }
call{ expr14_ s0 "(" s0 args s0 ")" }

args{ expr2_*argSep }
argSep{ s0 "," s0 }

grouping{ "(" expr ")" }
ident{ [a-zA-Z_] [a-zA-Z0-9_]* }
literal{ number }
number{ integer }
integer{ [+\-]? [0-9]+ }

whitespace{ [ \r\n\t] }
comment{ inlineComment | multilineComment }
inlineComment{ "//" [^\r\n]* }
multilineComment{ "/*" .*? "*/"}

s{ whitespace | comment }
s0{ s* }
s1{ s+ }